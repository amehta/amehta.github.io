<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tips on Tech Log</title>
    <link>https://amehta.github.io/tips/</link>
    <description>Recent content in Tips on Tech Log</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Fri, 17 Jul 2020 08:30:06 -0700</lastBuildDate>
    
	<atom:link href="https://amehta.github.io/tips/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Injecting custom behavior during editmode on a TextField in SwiftUI</title>
      <link>https://amehta.github.io/tips/injecting-custom-behavior-during-editmode-on-textfield-in-swift-ui/</link>
      <pubDate>Fri, 17 Jul 2020 08:30:06 -0700</pubDate>
      
      <guid>https://amehta.github.io/tips/injecting-custom-behavior-during-editmode-on-textfield-in-swift-ui/</guid>
      <description>Last Run on XCODE 11.6 / Swift 5.2
Definitions &amp;lsquo;TextField&amp;rsquo; is a View provided in SwiftUI for handling user entered input into an app. As per the documentaion, Apple defines it as
&amp;ldquo;TextField - A control that displays an editable text interface.&amp;rdquo;
struct TextFieldEditMode: View { @State private var someData = &amp;#34;&amp;#34; var body: some View { TextField(&amp;#34;Type something&amp;#34;, text: $someData) .font(.largeTitle) } } Initializers The &amp;lsquo;TextField&amp;rsquo; has four initializers, and the one we will be using in this post is the one listed below, that provides us with two additional parameters &amp;ldquo;onEditingChanged&amp;rdquo; and &amp;ldquo;onCommit&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Custom View Modifiers in SwiftUI</title>
      <link>https://amehta.github.io/tips/custom-view-modifiers-in-swift-ui/</link>
      <pubDate>Wed, 15 Jul 2020 21:32:39 -0700</pubDate>
      
      <guid>https://amehta.github.io/tips/custom-view-modifiers-in-swift-ui/</guid>
      <description>Last Run on XCODE 11.6 / Swift 5.2
In SwiftUI View(s) are the building blocks of the UI. All changes to the Views are done by calling special functions called modfiers that wrap up the original View with the needful changes and return a View back.
In the example below, we apply a few modifiers to a Text view to create the impression of a highlighted text.
Text(&amp;#34;I ♥️ SwiftUI&amp;#34;) .</description>
    </item>
    
    <item>
      <title>User Input in Swift commandline</title>
      <link>https://amehta.github.io/tips/user-input-in-swift-commandline/</link>
      <pubDate>Sun, 03 May 2020 22:18:51 -0700</pubDate>
      
      <guid>https://amehta.github.io/tips/user-input-in-swift-commandline/</guid>
      <description>Last Run on XCODE 11.4 / Swift 5.2
If you are writing a command line tool and need user input, the readLine() function can be used for it. It returns an optional
let input = readLine() And, if you dont want the ending new line character, you can set the strippingNewline parameter to true.
let input = readLine(strippingNewline: true) </description>
    </item>
    
    <item>
      <title>Checking if a Swift String contains a certain text</title>
      <link>https://amehta.github.io/tips/checking-if-swift-strings-contains-text/</link>
      <pubDate>Fri, 01 May 2020 12:11:26 -0700</pubDate>
      
      <guid>https://amehta.github.io/tips/checking-if-swift-strings-contains-text/</guid>
      <description>Last Run on XCODE 11.4 / Swift 5.2
A simple way to check if a string contains a certain text is to use the method contains available to Strings.
In the code snippet below, we will check if a string contains a certain text.
let fruit1 = &amp;#34;apple&amp;#34; let fruit2 = &amp;#34;banana&amp;#34; let mySentence = &amp;#34;An apple a day keeps the doctor away.&amp;#34; mySentence.contains(fruit1) // result --&amp;gt; True mySentence.contains(fruit2) // result --&amp;gt; False If we need to check the string against multiple options, we will have to use a variation of the contains method that takes a closure.</description>
    </item>
    
    <item>
      <title>Matching Swift Strings by Prefix or Suffix</title>
      <link>https://amehta.github.io/tips/matching-swift-strings-by-prefix-or-suffix/</link>
      <pubDate>Tue, 28 Apr 2020 21:56:43 -0700</pubDate>
      
      <guid>https://amehta.github.io/tips/matching-swift-strings-by-prefix-or-suffix/</guid>
      <description>Last Run on XCODE 11.4 / Swift 5.2
A simple way to check if a string starts or ends with a certain pattern is to use the method hasSuffix and hasPrefix available to Strings.
In the code snippet below, we will check if a string begins or ends with a specific text pattern.
let fileName1 = &amp;#34;InstagramCover.jpg&amp;#34; let fileName2 = &amp;#34;SnapchatCover.doc&amp;#34; fileName1.hasSuffix(&amp;#34;jpg&amp;#34;) // result --&amp;gt; True fileName2.hasSuffix(&amp;#34;jpg&amp;#34;) // result --&amp;gt; False fileName1.</description>
    </item>
    
    <item>
      <title>Access Swift String by Index</title>
      <link>https://amehta.github.io/tips/access-swift-string-by-index/</link>
      <pubDate>Tue, 21 Apr 2020 22:23:31 -0700</pubDate>
      
      <guid>https://amehta.github.io/tips/access-swift-string-by-index/</guid>
      <description>Last Run on XCODE 11.4 / Swift 5.2
The swift string class does not provide the ability to get a character at a specific index because of its native support for UTF characters.
In the code snippets below, we will walk through code to access elements of a string at speific positions.
Getting the first Character let mySwiftString = &amp;#34;Swift is awesome!&amp;#34; //Getting the first Character mySwiftString.first let firstIndex = mySwiftString.</description>
    </item>
    
    <item>
      <title>How to enumerate nodes in Spritekit?</title>
      <link>https://amehta.github.io/tips/enumerate_spritekit_nodes/</link>
      <pubDate>Fri, 10 Apr 2020 09:00:05 -0700</pubDate>
      
      <guid>https://amehta.github.io/tips/enumerate_spritekit_nodes/</guid>
      <description>Last Run on XCODE 11.4 / Swift 5.2
Spritekit has a method enumerateChildNodes that searches the children of the receiving node to perform processing for nodes that share a name.
In the code snippet below, we are are iterating through all the nodes with the name &amp;ldquo;trafficCar&amp;rdquo; in the parent node (or SKScene) and performing some action on it.
func moveTraffic() { enumerateChildNodes(withName: &amp;#34;trafficCar&amp;#34;) { (trafficCar, stop) in let car = trafficCar as!</description>
    </item>
    
  </channel>
</rss>